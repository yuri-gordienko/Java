package ua.com.alevel.Tasks;

import java.util.Arrays;

public class Main {

    public static void main(String[] args){

//        String[] res = new String[]{"dough", "cheese", "sauce", "dough"};
//        CombineStrings.doughIsEnough(res);

        String s = String.valueOf(CombineStrings.getValue("national aeronautics space administration"));
        System.out.println(s);

    }

    public class CombineStrings {
        public static String getValue(String dataFromDatabase) {
//            System.out.println(dataFromDatabase);
            String[] s = dataFromDatabase.split(" ");
            StringBuilder sb = new StringBuilder();

            for (String i: s) {
                sb.append(i.toUpperCase().charAt(0));
            }
            return sb.toString();
        }
    }


}

//-------------------------------------------------------------------------------------------------------------
//    –£ —Ü—å–æ–º—É –∑–∞–≤–¥–∞–Ω–Ω—ñ —Ç–∏ –Ω–∞–≤—á–∏—à—Å—è —ñ—Ç–µ—Ä—É–≤–∞—Ç–∏ –º–∞—Å–∏–≤.
//        –†–µ–∞–ª—ñ–∑—É–π –º–µ—Ç–æ–¥ getDoublePower(), —â–æ –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª powers —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤, —É —è–∫–æ–º—É
//        –∫–æ–∂–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—É –ø–æ–º–Ω–æ–∂–µ–Ω–µ –Ω–∞ 2.

//public class DoublePower {
//    public static int[] getDoublePower(int[] numbers) {
//        int[] numbers2 = new int [numbers.length];
//        for (int i = 0; i < numbers2.length; i++) {
//            numbers2[i] = numbers[i] * 2;
//            System.out.println(numbers2[i]);
//        }
//        System.out.println(numbers2);
//        return numbers2;
//    }
//}
//----------------------------------------------------------------------------------------------------------------

//    –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è: —Ä–µ–∞–ª—ñ–∑—É–π –º–µ—Ç–æ–¥ getSum(), –¥–æ—Ç—Ä–∏–º—É—é—á–∏—Å—å –ø–µ–≤–Ω–∏—Ö —É–º–æ–≤:
//
//        –º–µ—Ç–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —Å—É–º—É –∑–Ω–∞—á–µ–Ω—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, –ø–æ—á–∏–Ω–∞—é—á–∏ —ñ–∑ —Å–µ—Ä–µ–¥–∏–Ω–∏ –º–∞—Å–∏–≤—É.
//        –î–ª—è —Ü—å–æ–≥–æ, –ø—Ä–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—ñ —Ü–∏–∫–ª—É, –∑–∞–º—ñ—Å—Ç—å int i = 0; –ø—ñ–¥—Å—Ç–∞–≤ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏—Ä–∞–∑;
//        —è–∫—â–æ –∑—É—Å—Ç—Ä—ñ–Ω–µ—à —á–∏—Å–ª–æ 1, –≤–∏–π–¥–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é –∑ —É—Å—å–æ–≥–æ —Ü–∏–∫–ª—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –æ–ø–µ—Ä–∞—Ç–æ—Ä—É break
//        (–Ω–µ –¥–æ–¥–∞–≤–∞–π 1 –¥–æ —Å—É–º–∏);
//        –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –æ–ø–µ—Ä–∞—Ç–æ—Ä continue.

//public class LoopBreaker {
//    public static int getSum(int[] numbers) {
//        int sum = 0;
//        for (int i = numbers.length / 2; i < numbers.length; i++) {
//            if (numbers[i] == 1) {
//                break;
//            }
//            sum += numbers[i];
//
//        }
//        System.out.println(sum);
//        return sum;
//    }
//}
//-----------------------------------------------------------------------------------------------------------------

//    –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è: —Ä–µ–∞–ª—ñ–∑—É–π –º–µ—Ç–æ–¥ getSpeedStatistic(), —è–∫–∏–π –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ —à–≤–∏–¥–∫–æ—Å—Ç–µ–π results —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤
//    –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é, —É —è–∫–æ–º—É:
//        –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç - –Ω–∞–π–º–µ–Ω—à–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å;
//        –¥—Ä—É–≥–∏–π –µ–ª–µ–º–µ–Ω—Ç - –Ω–∞–π–±—ñ–ª—å—à–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å.
//        –ó–≤–µ—Ä–Ω–∏ —É–≤–∞–≥—É:
//
//        —è–∫—â–æ –≤—Ö—ñ–¥–Ω–∏–π –º–∞—Å–∏–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π, –ø–æ–≤–µ—Ä–Ω–∏ –º–∞—Å–∏–≤ –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é {0, 0};
//        —è–∫—â–æ –≤—Ö—ñ–¥–Ω–∏–π –º–∞—Å–∏–≤ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –ª–∏—à–µ –∑ –æ–¥–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞, –≤–≤–∞–∂–∞–π –π–æ–≥–æ –æ–¥–Ω–æ—á–∞—Å–Ω–æ –Ω–∞–π–º–µ–Ω—à–æ—é —Ç–∞ –Ω–∞–π–±—ñ–ª—å—à–æ—é —à–≤–∏–¥–∫—ñ—Å—Ç—é.

//public class SpeedStatistic {
//    public static int[] getSpeedStatistic(int[] results) {
//        if (results == null || results.length == 0) {
//            return new int[]{0, 0};
//        }
//        if (results.length == 1){
//            return new int[]{results[0], results[0]};
//        }
//
//        int minSpeed = results[0];
//        int maxSpeed = results[0];
//
//        for (int speed : results) {
//            if (speed < minSpeed) {
//                minSpeed = speed;
//            }
//            if (speed > maxSpeed) {
//                maxSpeed = speed;
//            }
//        }
//
//        return new int[]{minSpeed, maxSpeed};
//
//    }
//}
//---------------------------------------------------------------------------------------------------------------

//    –ù–µ—â–æ–¥–∞–≤–Ω–æ –º–∏ –ø—ñ–¥'—î–¥–Ω–∞–ª–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö —ñ –æ—Ç—Ä–∏–º—É—î–º–æ –∑ –Ω–µ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –≤–∏–≥–ª—è–¥—ñ: data=value.
//
//        –ê–ª–µ, –æ—Å—Ç–∞–Ω–Ω—ñ–º —á–∞—Å–æ–º, —É –∑–Ω–∞—á–µ–Ω–Ω—ñ value –ª—ñ—Ç–µ—Ä–∏ —Å—Ç–æ—è—Ç—å —Ç–æ –≤ –≤–µ—Ä—Ö–Ω—å–æ–º—É, —Ç–æ –≤ –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ...
//        –£ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ –≤–∏—Ö–æ–¥–∏—Ç—å –Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è, –∞ —á–æ—Ä—Ç–∑–Ω–∞-—â–æ ü§î
//
//        –ú–∏ —Å—Ç–≤–æ—Ä–∏–ª–∏ –º–µ—Ç–æ–¥ getValue(), —è–∫–∏–π –ø—Ä–∏–π–º–∞—î —Ä—è–¥–æ–∫ dataFromDatabase —É –≤–∏–≥–ª—è–¥—ñ data=value.
//
//        –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è: –ø—Ä–∏–±—Ä–∞—Ç–∏ –∑ —Ä—è–¥–∫—É data —Ç–∞ =, –∞ –ø–æ—Ç—ñ–º –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ value —É –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ.
//        –ë—É–¥—å —É–≤–∞–∂–Ω–∏–º, –±–æ value –≤ —Å–æ–±—ñ —Ç–µ–∂ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —Å–∏–º–≤–æ–ª =.

//public class CombineStrings {
//    public static String getValue(String dataFromDatabase) {
//        System.out.println(dataFromDatabase);
//        int i = dataFromDatabase.indexOf("=");
//        String s1 = dataFromDatabase.substring(i+1).toLowerCase();
//
//        System.out.println(s1);
//        return s1;
//    }
//}
//-----------------------------------------------------------------------------------------------------------

//    –î–æ –Ω–∞—Å –¥—ñ–π—à–ª–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è, —â–æ –ø–µ—Ä–µ–≤–µ—Ä—Ç–Ω—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏–º–∏ –¥–ª—è –ª—é–¥–µ–π.
//    –ú–∏ —â–µ –Ω–µ –∑–Ω–∞—î–º–æ —á–æ–º—É, –∞–ª–µ —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ —Ü—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –Ω—ñ—è–∫ –Ω–µ –º–æ–∂–Ω–∞. –¢—Ä–µ–±–∞ —è–∫–æ–º–æ–≥–∞ —à–≤–∏–¥—à–µ —à—É–∫–∞—Ç–∏ –ø–µ—Ä–µ–≤–µ—Ä—Ç–Ω—ñ–≤.
//
//        –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–ª–æ–≤–∞ —Ç–∞ —Ä–µ—á–µ–Ω–Ω—è. –á—Ö –º–æ–∂–Ω–∞ –≤–≤–∞–∂–∞—Ç–∏ –ø–µ—Ä–µ–≤–µ—Ä—Ç–Ω—è–º–∏,
//        —è–∫—â–æ —ó—Ö –º–æ–∂–Ω–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –æ–¥–Ω–∞–∫–æ–≤–æ –∑–ª—ñ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ, —Ç–∞ –Ω–∞–≤–ø–∞–∫–∏.
//
//        –†–µ–∞–ª—ñ–∑—É–π –º–µ—Ç–æ–¥ isWerewolf(), —è–∫–∏–π –ø–æ–∫–∞–∂–µ, —á–∏ —î —Ä—è–¥–æ–∫ target –ø–µ—Ä–µ–≤–µ—Ä—Ç–Ω–µ–º.

//public class DetectWerewolf {
//    public static boolean isWerewolf(String target) {
//        StringBuilder sb = new StringBuilder(target);
//        sb.reverse();
//        String s2 = sb.toString();
//        System.out.println(s2);
//        return s2.equals(target);
//    }
//}
//-------------------------------------------------------------------------------------------------------

